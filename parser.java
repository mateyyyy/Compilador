
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\023\003\000\002\002\004\000\002\014" +
    "\012\000\002\016\003\000\002\016\002\000\002\024\006" +
    "\000\002\024\004\000\002\024\002\000\002\020\005\000" +
    "\002\020\007\000\002\007\006\000\002\006\003\000\002" +
    "\006\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\010\003\000\002\011\011" +
    "\000\002\011\015\000\002\012\005\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\003\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\005\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\004" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\015\006\001\002\000\004\002\114\001" +
    "\002\000\004\002\001\001\002\000\004\016\007\001\002" +
    "\000\004\011\010\001\002\000\006\012\ufffa\023\012\001" +
    "\002\000\004\012\016\001\002\000\004\034\013\001\002" +
    "\000\006\012\ufffb\017\014\001\002\000\006\012\ufffa\023" +
    "\012\001\002\000\004\012\ufffc\001\002\000\004\014\017" +
    "\001\002\000\020\013\ufffd\023\020\024\034\025\021\026" +
    "\023\027\025\034\027\001\002\000\004\034\ufff4\001\002" +
    "\000\004\034\ufff1\001\002\000\004\013\113\001\002\000" +
    "\004\034\ufff2\001\002\000\020\013\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\034\uffe2\001\002\000\004\011" +
    "\070\001\002\000\020\013\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\034\uffe3\001\002\000\004\020\065\001" +
    "\002\000\020\013\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\034\uffe1\001\002\000\020\013\ufffe\023\020\024" +
    "\034\025\021\026\023\027\025\034\027\001\002\000\004" +
    "\034\035\001\002\000\020\013\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\034\ufff0\001\002\000\004\034\ufff3" +
    "\001\002\000\006\004\037\020\036\001\002\000\014\011" +
    "\044\033\042\034\040\035\043\036\046\001\002\000\020" +
    "\013\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\034" +
    "\ufff9\001\002\000\026\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\012\uffd8\021\uffd8\022\uffd8\031\uffd8\032\uffd8\001" +
    "\002\000\004\004\061\001\002\000\026\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\012\uffda\021\uffda\022\uffda\031" +
    "\uffda\032\uffda\001\002\000\026\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\012\uffd9\021\uffd9\022\uffd9\031\uffd9\032" +
    "\uffd9\001\002\000\012\011\044\033\042\034\040\035\043" +
    "\001\002\000\014\004\ufff6\005\047\006\050\007\052\010" +
    "\051\001\002\000\004\004\ufff5\001\002\000\012\011\044" +
    "\033\042\034\040\035\043\001\002\000\012\011\044\033" +
    "\042\034\040\035\043\001\002\000\012\011\044\033\042" +
    "\034\040\035\043\001\002\000\012\011\044\033\042\034" +
    "\040\035\043\001\002\000\026\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\012\uffdd\021\uffdd\022\uffdd\031\uffdd\032" +
    "\uffdd\001\002\000\026\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\012\uffdc\021\uffdc\022\uffdc\031\uffdc\032\uffdc\001" +
    "\002\000\026\004\uffde\005\uffde\006\uffde\007\052\010\051" +
    "\012\uffde\021\uffde\022\uffde\031\uffde\032\uffde\001\002\000" +
    "\026\004\uffdf\005\uffdf\006\uffdf\007\052\010\051\012\uffdf" +
    "\021\uffdf\022\uffdf\031\uffdf\032\uffdf\001\002\000\014\005" +
    "\047\006\050\007\052\010\051\012\060\001\002\000\026" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\021" +
    "\uffdb\022\uffdb\031\uffdb\032\uffdb\001\002\000\020\013\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\034\ufff8\001" +
    "\002\000\020\013\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\034\uffe5\001\002\000\020\013\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\034\uffe6\001\002\000\020" +
    "\013\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\034" +
    "\uffe4\001\002\000\014\011\044\033\042\034\040\035\043" +
    "\036\046\001\002\000\004\004\067\001\002\000\020\013" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\034\ufff7" +
    "\001\002\000\012\011\044\033\042\034\040\035\043\001" +
    "\002\000\004\012\103\001\002\000\022\005\047\006\050" +
    "\007\052\010\051\021\076\022\073\031\074\032\077\001" +
    "\002\000\012\011\uffe9\033\uffe9\034\uffe9\035\uffe9\001\002" +
    "\000\014\011\uffec\020\102\033\uffec\034\uffec\035\uffec\001" +
    "\002\000\012\011\044\033\042\034\040\035\043\001\002" +
    "\000\012\011\uffea\033\uffea\034\uffea\035\uffea\001\002\000" +
    "\014\011\uffeb\020\100\033\uffeb\034\uffeb\035\uffeb\001\002" +
    "\000\012\011\uffe8\033\uffe8\034\uffe8\035\uffe8\001\002\000" +
    "\014\005\047\006\050\007\052\010\051\012\uffed\001\002" +
    "\000\012\011\uffe7\033\uffe7\034\uffe7\035\uffe7\001\002\000" +
    "\004\014\104\001\002\000\020\013\ufffd\023\020\024\034" +
    "\025\021\026\023\027\025\034\027\001\002\000\004\013" +
    "\106\001\002\000\022\013\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\107\034\uffef\001\002\000\004\014" +
    "\110\001\002\000\020\013\ufffd\023\020\024\034\025\021" +
    "\026\023\027\025\034\027\001\002\000\004\013\112\001" +
    "\002\000\020\013\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\034\uffee\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\006\014\004\023\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\031\007\023\010" +
    "\027\011\032\016\021\017\030\020\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\031\007" +
    "\061\010\063\011\032\020\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\044\006\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\055\001\001\000\004\004\054\001" +
    "\001\000\004\004\053\001\001\000\004\004\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\044\006\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\071\012\070\001\001\000" +
    "\002\001\001\000\004\003\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\031\007" +
    "\023\010\027\011\032\016\104\017\030\020\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\031\007\023\010\027\011\032\016\110\017\030" +
    "\020\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



      TablaSimbolos tabla = new TablaSimbolos();
      AssemblerGenerator ag;
      Node RaizNode;
      public void report_error(String message, Object info) {
    
          /* Create a StringBuffer called 'm' with the string 'Error' in it. */
          StringBuffer m = new StringBuffer("Error");
    
          /* Check if the information passed to the method is the same
            type as the type java_cup.runtime.Symbol. */
          if (info instanceof java_cup.runtime.Symbol) {
              /* Declare a java_cup.runtime.Symbol object 's' with the
                information in the object info that is being typecasted
                as a java_cup.runtime.Symbol object. */
              java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
    
              /* Check if the line number in the input is greater or
                equal to zero. */
              if (s.left >= 0) {                
                  /* Add to the end of the StringBuffer error message
                    the line number of the error in the input. */
                  m.append(" in line "+(s.left+1));   
                  /* Check if the column number in the input is greater
                    or equal to zero. */
                  if (s.right >= 0)                    
                      /* Add to the end of the StringBuffer error message
                        the column number of the error in the input. */
                      m.append(", column "+(s.right+1));
              }
          }
    
          /* Add to the end of the StringBuffer error message created in
            this method the message that was passed into this method. */
          m.append(" : "+message);
    
          /* Print the contents of the StringBuffer 'm', which contains
            an error message, out on a line. */
          System.err.println(m);
      }
    
      /* Change the method report_fatal_error so when it reports a fatal
        error it will display the line and column number of where the
        fatal error occurred in the input as well as the reason for the
        fatal error which is passed into the method in the object
        'message' and then exit.*/
      public void report_fatal_error(String message, Object info) {
          report_error(message, info);
          System.exit(1);
      }
  

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // main ::= main_block 
            {
              Object RESULT =null;
		int mbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mb = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RaizNode = new Node(null, null, mb, "root");
              System.out.println("Arbol");
              RaizNode.recorrer(tabla);
              RaizNode.getType(tabla);
              RaizNode.recorridoInterprete(tabla);
              ag = new AssemblerGenerator();
              String assemblerCode = ag.generateAssembler(RaizNode, tabla);
              System.out.println("\n--- Código Assembler ---\n" + assemblerCode);
              ag.saveToFile("salida.txt");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_block ::= VOID MAIN LPAREN params RPAREN LKEY program RKEY 
            {
              Node RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = pg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_block",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= expr_dcl_list 
            {
              Node RESULT =null;
		int edlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node edl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = edl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // params ::= INT ID COMA params 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // params ::= INT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= tipo ID SEMI 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node("=", new Node(id, "Leaf", tp), null, "Declaration" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= tipo ID EQUAL valor SEMI 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node("=", new Node(id, "Leaf",  tp), vl, "Declaration" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // asignacion ::= ID EQUAL valor SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node("=", new Node(id, "VarOP"), vl, "Asignacion" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valor ::= expr 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valor ::= BOOLEAN_LIT 
            {
              Node RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(bl.toString(), "Leaf", "boolean"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= STRING 
            {
              String RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= if_statement 
            {
              Node RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node is = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if_statement ::= IF LPAREN condicion RPAREN LKEY program RKEY 
            {
              Node RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node cd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Node(null, cd, pg, "if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // if_statement ::= IF LPAREN condicion RPAREN LKEY program RKEY ELSE LKEY program RKEY 
            {
              Node RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Node cd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node pg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pgelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pgelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pgelse = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                  Node ifNode = new Node(null, cd, pg, "if");
                  Node elseNode = new Node(null, null, pgelse, "else");
                  RESULT = new Node(null, ifNode, elseNode, "ifelse"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicion ::= expr comparison_expr expr 
            {
              Node RESULT =null;
		int ex0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ex0 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ce = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ex1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(ce, ex0, ex1, "condition"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comparison_expr ::= GREATER 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comparison_expr ::= LESS 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comparison_expr ::= DOUBLEEQUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comparison_expr ::= NOTEQUAL 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comparison_expr ::= LESS EQUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comparison_expr ::= GREATER EQUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr_dcl_list ::= expr_dcl_list declaracion 
            {
              Node RESULT =null;
		int edlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int edlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node edl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dcl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(null, edl, dcl, "expr"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_dcl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr_dcl_list ::= expr_dcl_list asignacion 
            {
              Node RESULT =null;
		int edlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int edlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node edl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node asg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(null, edl, asg, "expr"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_dcl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr_dcl_list ::= expr_dcl_list statement 
            {
              Node RESULT =null;
		int edlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int edlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node edl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(null, edl, st, "expr"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_dcl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_dcl_list ::= declaracion 
            {
              Node RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dcl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dcl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_dcl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_dcl_list ::= asignacion 
            {
              Node RESULT =null;
		int asgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node asg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = asg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_dcl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_dcl_list ::= statement 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_dcl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_part ::= expr SEMI 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr PLUS expr 
            {
              Node RESULT =null;
		int ex0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ex0 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ex1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node("+", ex0, ex1, "Operation"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr MINUS expr 
            {
              Node RESULT =null;
		int ex0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ex0 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ex1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node("-", ex0, ex1, "Operation"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr TIMES expr 
            {
              Node RESULT =null;
		int ex0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ex0 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ex1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node("*", ex0, ex1, "Operation"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr DIVIDE expr 
            {
              Node RESULT =null;
		int ex0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ex0 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ex1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node("/", ex0, ex1, "Operation"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= LPAREN expr RPAREN 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= NUMBER 
            {
              Node RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(number.toString(), "Leaf", "int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= FLOATNUM 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(f.toString(), "Leaf", "float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(id, "VarOP"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
