  /*
    File Name: ycalc.cup
    To Create: > java java_cup.Main < ycalc.cup
  */
    
    
  /* ----------------------Preliminary Declarations Section--------------------*/
    
  import java_cup.runtime.*;

  parser code {:
      TablaSimbolos tabla = new TablaSimbolos();
      AssemblerGenerator ag;
      Node RaizNode;
      public void report_error(String message, Object info) {
    
          /* Create a StringBuffer called 'm' with the string 'Error' in it. */
          StringBuffer m = new StringBuffer("Error");
    
          /* Check if the information passed to the method is the same
            type as the type java_cup.runtime.Symbol. */
          if (info instanceof java_cup.runtime.Symbol) {
              /* Declare a java_cup.runtime.Symbol object 's' with the
                information in the object info that is being typecasted
                as a java_cup.runtime.Symbol object. */
              java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
    
              /* Check if the line number in the input is greater or
                equal to zero. */
              if (s.left >= 0) {                
                  /* Add to the end of the StringBuffer error message
                    the line number of the error in the input. */
                  m.append(" in line "+(s.left+1));   
                  /* Check if the column number in the input is greater
                    or equal to zero. */
                  if (s.right >= 0)                    
                      /* Add to the end of the StringBuffer error message
                        the column number of the error in the input. */
                      m.append(", column "+(s.right+1));
              }
          }
    
          /* Add to the end of the StringBuffer error message created in
            this method the message that was passed into this method. */
          m.append(" : "+message);
    
          /* Print the contents of the StringBuffer 'm', which contains
            an error message, out on a line. */
          System.err.println(m);
      }
    
      /* Change the method report_fatal_error so when it reports a fatal
        error it will display the line and column number of where the
        fatal error occurred in the input as well as the reason for the
        fatal error which is passed into the method in the object
        'message' and then exit.*/
      public void report_fatal_error(String message, Object info) {
          report_error(message, info);
          System.exit(1);
      }
  :};
    

    
  /* ------------Declaration of Terminals and Non Terminals Section----------- */
    

  terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, AND, OR;
  terminal           RKEY, LKEY, VOID, MAIN, COMA, EQUAL, DOUBLEEQUAL, NOTEQUAL;
  terminal           INT,  FLOAT, BOOLEAN, STRING, IF, ELSE, WHILE, GREATER, LESS;

  terminal Integer NUMBER;
  terminal String ID;
  terminal Float FLOATNUM;
  terminal Boolean BOOLEAN_LIT;

  non terminal String tipo, comparison_expr, and_or;
  non terminal Node expr, expr_part, valor, asignacion, statement, if_statement, while_statement, condicion;
  non terminal Node func_section, main_block, func_list, program, expr_dcl_list, declaracion;
  non terminal func, void_decl, main;
  non terminal params;


    

  /* -------------Precedence and Associatively of Terminals Section----------- */
    
  /*
    Precedence of non terminals could be defined here.  If you do define
    precedence here you won't need to worry about precedence in the
    Grammar Section, i.e. that TIMES should have a higher precedence
    than PLUS.
    
    The precedence defined here would look something like this where the
    lower line always will have higher precedence than the line before it.
  */   
    precedence left PLUS, MINUS; 
    precedence left TIMES, DIVIDE; 



  /* ----------------------------Grammar Section-------------------- */
    
    main ::= main_block:mb
            {: RaizNode = new Node(null, null, mb, "root");
              System.out.println("Arbol");
              RaizNode.recorrer(tabla);
              RaizNode.getType(tabla);
              RaizNode.recorridoInterprete(tabla);
              ag = new AssemblerGenerator();
              String assemblerCode = ag.generateAssembler(RaizNode, tabla);
              System.out.println("\n--- CÃ³digo Assembler ---\n" + assemblerCode);
              ag.saveToFile("salida.txt");
            :}
          ;

  main_block ::= VOID MAIN LPAREN params RPAREN LKEY program:pg RKEY
                  {: RESULT = pg; :}
                ;

  program ::= expr_dcl_list:edl
              {: RESULT = edl; :}
            | /* empty */
            ;

  params ::= INT ID:id COMA params
            | INT ID:id
            | /* empty */
            ;

  declaracion ::= tipo:tp ID:id SEMI
                  {: RESULT = new Node("=", new Node(id, "Leaf", tp), null, "Declaration" ); :}
                | tipo:tp ID:id EQUAL valor:vl SEMI
                  {: RESULT = new Node("=", new Node(id, "Leaf",  tp), vl, "Declaration" ); :}
                ;

  asignacion ::= ID:id EQUAL valor:vl SEMI
                {: RESULT = new Node("=", new Node(id, "VarOP"), vl, "Asignacion" ); :}
                ;

  valor ::= expr:ex
          {: RESULT = ex; :} 
          | BOOLEAN_LIT:bl 
          {: RESULT = new Node(bl.toString(), "Leaf", "boolean"); :} 
          ;

  tipo ::= INT {: RESULT = "int"; :}
          | FLOAT {: RESULT = "float"; :} 
          | STRING {: RESULT = "string"; :} 
          | BOOLEAN {: RESULT = "boolean"; :}
          ;

  statement ::= if_statement:is
              {: RESULT = is; :}
              |
              while_statement:ws
              {: RESULT = ws; :}
              ;

  if_statement ::= IF LPAREN condicion:cd RPAREN LKEY program:pg RKEY
                  {: RESULT = new Node(null, cd, pg, "if"); :}
                  |
                  IF LPAREN condicion:cd RPAREN LKEY program:pg RKEY ELSE LKEY program:pgelse RKEY
                  {:
                  Node ifNode = new Node(null, cd, pg, "if");
                  Node elseNode = new Node(null, null, pgelse, "else");
                  RESULT = new Node(null, ifNode, elseNode, "ifelse"); :}
                  ;

  while_statement ::= WHILE LPAREN condicion:cd RPAREN LKEY program:pg RKEY
                      {: RESULT = new Node(null, cd, pg, "while"); :};

  condicion ::= expr:ex0 comparison_expr:ce expr:ex1 and_or:ao condicion:cd
                  {: 
                  Node compIz = new Node(ce, ex0, ex1, "condition");
                  RESULT = new Node(null, compIz, cd, ao); 
                  :}
                |
                expr:ex0 comparison_expr:ce expr:ex1
                  {: RESULT = new Node(ce, ex0, ex1, "condition"); :}
                ;

  and_or ::= AND {: RESULT = "AND"; :}
            | OR {: RESULT = "OR"; :};

  comparison_expr ::= GREATER
                      {: RESULT = ">"; :}
                    | LESS
                      {: RESULT = "<"; :}
                    | DOUBLEEQUAL
                      {: RESULT = "=="; :}
                    | NOTEQUAL
                      {: RESULT = "!="; :}
                    | LESS EQUAL
                      {: RESULT = "<="; :}
                    | GREATER EQUAL
                    {: RESULT = ">="; :}
                    ;

  expr_dcl_list ::= expr_dcl_list:edl declaracion:dcl
                    {: RESULT = new Node(null, edl, dcl, "expr"); :}
                  |
                  expr_dcl_list:edl asignacion:asg
                    {: RESULT = new Node(null, edl, asg, "expr"); :}
                  | expr_dcl_list:edl statement:st
                    {: RESULT = new Node(null, edl, st, "expr"); :}
                  | declaracion:dcl
                  {: RESULT = dcl; :}
                  | asignacion:asg
                  {: RESULT = asg; :}
                  | statement:st
                  {: RESULT = st; :}
                  ;

  expr_part ::= expr:ex SEMI
                {: RESULT = ex; :}
              ;

  expr ::= expr:ex0 PLUS expr:ex1
            {: RESULT = new Node("+", ex0, ex1, "Operation"); :}
        | expr:ex0 MINUS expr:ex1
            {: RESULT = new Node("-", ex0, ex1, "Operation"); :}
        | expr:ex0 TIMES expr:ex1
            {: RESULT = new Node("*", ex0, ex1, "Operation"); :}
        | expr:ex0 DIVIDE expr:ex1
            {: RESULT = new Node("/", ex0, ex1, "Operation"); :}
        | LPAREN expr:ex RPAREN
            {: RESULT = ex; :}
        | NUMBER:number
            {: RESULT = new Node(number.toString(), "Leaf", "int"); :}
        | FLOATNUM:f
          {: RESULT = new Node(f.toString(), "Leaf", "float"); :}
        | ID:id
          {: RESULT = new Node(id, "VarOP"); :}
        ;