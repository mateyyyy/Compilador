/*
  File Name: ycalc.cup
  To Create: > java java_cup.Main < ycalc.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import java_cup.runtime.*;

parser code {:
    TablaSimbolos tabla = new TablaSimbolos();
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   

terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN;
terminal           RKEY, LKEY, FUNCTION, VOID, MAIN, COMA, RETURN, EQUAL;
terminal           INT, FLOAT, BOOLEAN, STRING, IF, ELSE, WHILE, FOR;

   

non terminal     expr_list, expr_part, func, void_decl, main, program, declaracion;
non terminal     params, func_list, expr_dcl_list, tipo, global_var;

non terminal Object expr;
terminal Integer NUMBER;
terminal String ID;
   

/* -------------Precedence and Associatively of Terminals Section----------- */
   
/*
  Precedence of non terminals could be defined here.  If you do define
  precedence here you won't need to worry about precedence in the
  Grammar Section, i.e. that TIMES should have a higher precedence
  than PLUS.
  
  The precedence defined here would look something like this where the
  lower line always will have higher precedence than the line before it.
*/   
  precedence left PLUS, MINUS; 
  precedence left TIMES, DIVIDE; 



/* ----------------------------Grammar Section-------------------- */
   
/* The grammar for our parser.
   
   expr_list ::=   expr_list expr_part
                 | expr_part
   expr_part ::=   expr SEMI
   expr      ::=   expr PLUS factor
                 | expr MINUS factor
                 | factor
   factor    ::=   factor TIMES term
                 | factor DIVIDE term
                 | term
   term     ::=    LPAREN expr RPAREN
                 | NUMBER
                 | ID     
*/
   

   main ::= func_list VOID MAIN LPAREN params RPAREN LKEY program RKEY
            {: tabla.MostrarTabla(); :}
            | VOID MAIN LPAREN params RPAREN LKEY program RKEY
            {: tabla.MostrarTabla(); :}
            ;

   global_var ::= tipo ID SEMI
                  {: /*agregar a lista de  variables globales*/ :}
                  |
                  tipo ID EQUAL expr SEMI
                  {: /*agregar a lista de  variables globales*/ :}
                  |
                  /* empty */ 
                  {: /* no hay variables globales */ :}
                  ;

   tipo ::= INT | FLOAT | BOOLEAN | STRING ;

   func_list ::=   func_list func 
                  | func_list void_decl
                  | void_decl
                  | func
                  |
                  ;

   func ::=   FUNCTION ID LPAREN params RPAREN LKEY program RETURN expr SEMI RKEY 
               {: tabla.cleanTablaFunc(); :}
               ;

   void_decl ::=  VOID ID LPAREN params RPAREN LKEY program RKEY
                  {: tabla.cleanTablaFunc(); :}
                  ;

   program ::= expr_dcl_list
               | /* empty */ 
               ;

   params ::= INT ID:id COMA params
               {: tabla.AgregarFunc(id); :}
                | INT ID:id
                {: tabla.AgregarFunc(id); :}
                | /* sin parametro */
                ;


   declaracion ::= INT ID:id SEMI
                  {: tabla.Agregar(id); :} 
                  |
                  INT ID:id EQUAL expr SEMI
                  {: tabla.Agregar(id); :} 
                  ;

   

   expr_dcl_list ::= expr_dcl_list expr_part
                  | expr_dcl_list declaracion
                  | expr_part
                  | declaracion
                  ;

   expr_list ::= expr_list expr_part
                 |
                 expr_part;
   
   expr_part ::= expr
                 SEMI
                 
                 ;
   
   expr      ::= expr PLUS expr
                 |
                 expr MINUS expr
                 |
                 expr TIMES expr
                 |
                 expr DIVIDE expr
                 |
                 LPAREN expr RPAREN
                 |
                 NUMBER
                 | 
                 ID:id
                 {:  if(!tabla.Existe(id)){
                     System.err.println("Error: variable '" + id + "' no declarada.");
                 }
                   :}
                 ;
